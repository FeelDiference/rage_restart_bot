# CI/CD –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Rage Restart Bot
# 
# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ GitHub Repository Settings:
# - SERVER_USER: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
# - SERVER_SSH_KEY: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π SSH –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
# - TELEGRAM_BOT_TOKEN: —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
# - TELEGRAM_CHAT_ID: ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
#
name: Deploy Rage Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rage-restart-bot

jobs:
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8
    
    - name: Lint with flake8
      run: |
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check src/
    
    - name: Run tests
      run: |
        pytest tests/ -v || echo "–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫—ç—à–∞
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º buildx –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫—ç—à–∞
        platforms: linux/amd64

  # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository for deployment files
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 78.37.40.131
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 23
        timeout: 300s
        script: |
          echo "üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Rage Bot..."
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–±–µ–∑ sudo)
          mkdir -p /opt/rage-restart-bot || {
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å /opt/rage-restart-bot, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
            mkdir -p $HOME/rage-restart-bot
            cd $HOME/rage-restart-bot
          }
          
          # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤ /opt, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Ç—É–¥–∞
          if [ -d "/opt/rage-restart-bot" ]; then
            cd /opt/rage-restart-bot
          fi
          
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
          if [ -d ".git" ]; then
            echo "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
            git pull origin main
          else
            echo "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
            git clone git@github.com-rage-bot:${{ github.repository }}.git .
          fi
          
          # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è production
          echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
          cat > .env << 'ENV_EOF'
          GITHUB_REPOSITORY=${{ github.repository }}
          TZ=Europe/Moscow
          COMPOSE_PROJECT_NAME=rage-bot
          BOT_MEMORY_LIMIT=256m
          BOT_CPU_LIMIT=0.5
          LOG_LEVEL=INFO
          ENVIRONMENT=production
          ENV_EOF
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
          docker compose down || docker-compose down || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
          
          # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GitHub Container Registry (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π)
          echo "üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑ –∏–ª–∏ —Å–æ–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
          echo "üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
          if docker compose pull rage-bot 2>/dev/null || docker-compose pull rage-bot 2>/dev/null; then
            echo "‚úÖ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ registry"
          else
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑, —Å–æ–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ..."
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π compose —Ñ–∞–π–ª –¥–ª—è —Å–±–æ—Ä–∫–∏
            if [ -f "docker-compose.build.yml" ]; then
              echo "üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º docker-compose.build.yml –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏"
              cp docker-compose.build.yml docker-compose.override.yml
              if docker compose build rage-bot 2>/dev/null || docker-compose build rage-bot 2>/dev/null; then
                echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
              else
                echo "‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º"
                rm -f docker-compose.override.yml
              fi
            else
              echo "‚ö†Ô∏è docker-compose.build.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–∑"
            fi
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ ! -f "config/config.yaml" ]; then
            echo "‚ùå –§–∞–π–ª config/config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏!"
            echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ config/:"
            ls -la config/ || echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è config/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
            ls -la .
            exit 1
          else
            echo "‚úÖ –§–∞–π–ª config/config.yaml –Ω–∞–π–¥–µ–Ω"
          fi
          
          # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          mkdir -p logs data
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
          docker compose up -d rage-bot || docker-compose up -d rage-bot
          
          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
          sleep 15
          
          echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:"
          docker compose ps || docker-compose ps
          
          echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
          docker compose logs --tail=20 rage-bot || docker-compose logs --tail=20 rage-bot
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          if docker compose ps rage-bot | grep -q "Up" || docker-compose ps rage-bot | grep -q "Up"; then
            echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!"
            docker compose logs rage-bot || docker-compose logs rage-bot
            exit 1
          fi
          
          # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
          echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
          docker image prune -f
          
          echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    
    - name: Copy deployment files
      uses: appleboy/scp-action@v0.1.5
      with:
        host: 78.37.40.131
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 23
        source: "docker-compose.yml,scripts/setup.sh"
        target: "/opt/rage-restart-bot/"
        strip_components: 0

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "‚úÖ Rage Bot —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        # curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
        #      -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
        #      -d "text=‚úÖ Rage Bot —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç! Commit: ${{ github.sha }}"
    
    - name: Notify on failure
      if: ${{ needs.deploy.result == 'failure' || needs.build-and-push.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ Rage Bot!"
        # curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
        #      -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
        #      -d "text=‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ Rage Bot! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ GitHub Actions."