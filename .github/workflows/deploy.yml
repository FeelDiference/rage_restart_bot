name: Deploy Rage Bot

on:
  push:
    branches: [ main ]

jobs:
  # –≠—Ç–æ—Ç job —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç Docker –æ–±—Ä–∞–∑ –≤ GitHub Container Registry
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set repo name to lowercase
        id: string
        run: echo "repo_lowercase=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ steps.string.outputs.repo_lowercase }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # –≠—Ç–æ—Ç job —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç —Å–≤–µ–∂–∏–π –æ–±—Ä–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository for deployment files
        uses: actions/checkout@v4

      - name: Test SSH connection
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 81.177.220.187
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 30s
          script: |
            echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
            echo "‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 81.177.220.187
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            set -e # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            
            echo "üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
            echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:"
            echo "  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(whoami)"
            echo "  - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
            echo "  - Docker –≤–µ—Ä—Å–∏—è: $(docker --version)"
            echo "  - Docker Compose –≤–µ—Ä—Å–∏—è: $(docker compose version)"
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            PROJECT_DIR="/home/${{ secrets.SERVER_USER }}/rage-restart-bot"
            mkdir -p $PROJECT_DIR
            cd $PROJECT_DIR
            
            echo "üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º -f, —á—Ç–æ–±—ã curl –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
            curl -sSLf -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -o docker-compose.yml "https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é config –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            mkdir -p config
            curl -sSLf -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -o config/config.yaml "https://raw.githubusercontent.com/${{ github.repository }}/main/config/config.yaml"
            
            echo "üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞..."
            docker compose pull
            
            echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ rage-network..."
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ç—å rage-network, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            if ! docker network ls | grep -q "rage-network"; then
              echo "üì° –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å rage-network"
              docker network create rage-network
            else
              echo "üì° –°–µ—Ç—å rage-network —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            fi
            
            echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            docker compose down --remove-orphans || true
            
            echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
            docker compose up -d --remove-orphans
            
            echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            docker compose ps
            
            echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
            docker image prune -f
            
            echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
