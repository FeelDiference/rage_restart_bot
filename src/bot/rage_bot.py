"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Rage —Å–µ—Ä–≤–µ—Ä–æ–º.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º.
"""

import asyncio
import time
from typing import Any, Dict

from loguru import logger
from telegram import BotCommand, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationHandlerStop,
    CallbackContext,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from src.docker_api.manager import ContainerStatus, DockerManager
from src.monitoring.server_monitor import ServerHealth, ServerMonitor
from src.utils.config import config_manager


class RageBot:
    """
    Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Rage —Å–µ—Ä–≤–µ—Ä–æ–º –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.

    Attributes:
        application: Telegram bot application
        docker_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        server_monitor: –ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        restart_limit: –õ–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤ —á–∞—Å
        restart_history: –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.telegram_config = config_manager.get_telegram_config()
        self.docker_config = config_manager.get_docker_config()
        self.security_config = config_manager.get_security_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.docker_manager = DockerManager(
            container_name=config_manager.get_container_name(),
            restart_timeout=self.docker_config.get("restart_timeout", 30),
        )
        self.server_monitor = ServerMonitor()

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –ª–∏–º–∏—Ç—ã —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤
        self.restart_limit = self.security_config.get("max_restarts_per_hour", 10)
        self.restart_history: Dict[str, list] = {}  # user_id: [timestamps]

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = (
            Application.builder().token(config_manager.get_telegram_token()).build()
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

        logger.info("RageBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._cmd_start))
        self.application.add_handler(CommandHandler("help", self._cmd_help))
        self.application.add_handler(CommandHandler("chatid", self._cmd_chatid))
        self.application.add_handler(CommandHandler("status", self._cmd_status))
        self.application.add_handler(CommandHandler("restart", self._cmd_restart))
        self.application.add_handler(CommandHandler("stop", self._cmd_stop))
        self.application.add_handler(
            CommandHandler("start_server", self._cmd_start_server)
        )
        self.application.add_handler(CommandHandler("logs", self._cmd_logs))
        self.application.add_handler(CommandHandler("info", self._cmd_info))
        self.application.add_handler(CommandHandler("players", self._cmd_players))
        self.application.add_handler(CommandHandler("diagnose", self._cmd_diagnose))

        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –î–û–õ–ñ–ù–ê –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–º
        # –Ω–æ–º–µ—Ä–æ–º (–≤ PTB –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –º–µ–Ω—å—à–∏–º –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–∞–Ω—å—à–µ).
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º ApplicationHandlerStop, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        # –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ø–¥–µ–π—Ç–∞ –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏.
        self.application.add_handler(
            MessageHandler(filters.ALL, self._check_authorization),
            group=-1,  # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã 0
        )

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def _check_authorization(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–≥—Ä—É–ø–ø—ã.

        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if not update.effective_chat or not update.effective_user:
            return

        chat_id = str(update.effective_chat.id)
        user_id = str(update.effective_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã –∏–∑ white-list –∏ –õ–° –∞–¥–º–∏–Ω–æ–≤
        if not config_manager.is_chat_allowed(chat_id, user_id):
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            # —Ç–µ–∫—É—â–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞ (–Ω–∏ –æ–¥–∏–Ω CommandHandler –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω).
            if update.message:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                )
            logger.warning(
                f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —á–∞—Ç–µ {chat_id}"
            )
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞
            raise ApplicationHandlerStop

    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
        """
        welcome_text = (
            "ü§ñ **Rage Server Bot**\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å Rage —Å–µ—Ä–≤–µ—Ä–æ–º –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
            "‚Ä¢ /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
            "‚Ä¢ /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
            "‚Ä¢ /start_server - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
            "‚Ä¢ /logs - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "‚Ä¢ /info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üîí –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö."
        )

        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)

        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

    async def _cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
        """
        help_text = (
            "üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
            "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º:**\n"
            "‚Ä¢ `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞\n"
            "‚Ä¢ `/restart` - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä (–ª–∏–º–∏—Ç: {}/—á–∞—Å)\n"
            "‚Ä¢ `/stop` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
            "‚Ä¢ `/start_server` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\n\n"
            "**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**\n"
            "‚Ä¢ `/logs [—Å—Ç—Ä–æ–∫–∏]` - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)\n"
            "‚Ä¢ `/info` - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ\n"
            "‚Ä¢ `/players` - –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω\n"
            "‚Ä¢ `/diagnose` - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\n\n"
            "**–°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–µ—Ä–∞:**\n"
            "‚Ä¢ ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ - –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
            "‚Ä¢ üîÑ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø - –°–µ—Ä–≤–µ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞\n"
            "‚Ä¢ ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ - –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏\n"
            "‚Ä¢ ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
            "**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –≤ —á–∞—Å\n"
            "‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è"
        ).format(self.restart_limit)

        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

    async def _cmd_chatid(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏).
        """
        chat = update.effective_chat
        user = update.effective_user
        
        chat_info = (
            f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\n"
            f"üÜî **ID —á–∞—Ç–∞:** `{chat.id}`\n"
            f"üìù **–¢–∏–ø:** {chat.type}\n"
            f"üë§ **–í–∞—à ID:** `{user.id}`\n\n"
        )
        
        if chat.type in ['group', 'supergroup']:
            chat_info += (
                f"üë• **–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:** {chat.title or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"‚ÑπÔ∏è **–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ config.yaml:**\n"
                f"```yaml\n"
                f"allowed_groups:\n"
                f"  - \"{chat.id}\"\n"
                f"```"
            )
        else:
            chat_info += (
                f"‚ÑπÔ∏è **–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –õ–° –¥–æ–±–∞–≤—å—Ç–µ –≤ config.yaml:**\n"
                f"```yaml\n"
                f"admin_users:\n"
                f"  - \"{user.id}\"\n"
                f"```"
            )
        
        await update.message.reply_text(chat_info, parse_mode=ParseMode.MARKDOWN)

    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status.
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container_status = self.docker_manager.get_container_status()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
            server_health, health_details = self.server_monitor.check_server_health()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            status_text = self._format_status_report(
                container_status, server_health, health_details
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ parse_mode –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            await status_msg.edit_text(status_text)

        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
            await status_msg.edit_text(error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status: {e}")

    async def _cmd_restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart.
        """
        user_id = str(update.effective_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤
        if not self._check_restart_limit(user_id):
            await update.message.reply_text(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ ({self.restart_limit}/—á–∞—Å).\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        restart_msg = await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...")

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._add_restart_to_history(user_id)

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç
            success = self.docker_manager.restart_container()
            
            # –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ "–ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø"
            if success:
                self.server_monitor.mark_container_restart()

            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
                await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
                server_health, _ = self.server_monitor.check_server_health()

                result_text = (
                    "‚úÖ **–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!**\n\n"
                    f"üîç –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞: {server_health.value.upper()}\n"
                    f"üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {update.effective_user.first_name}"
                )

                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            else:
                result_text = (
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞!**\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )

                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

            await restart_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            error_text = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ: {str(e)}"
            await restart_msg.edit_text(error_text)
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞: {e}")

    async def _cmd_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop.
        """
        stop_msg = await update.message.reply_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...")

        try:
            success = self.docker_manager.stop_container()

            if success:
                result_text = (
                    "‚èπÔ∏è **–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n\n"
                    f"üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {update.effective_user.first_name}"
                )
                logger.info(
                    f"–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}"
                )
            else:
                result_text = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞!**"
                logger.error(
                    f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}"
                )

            await stop_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}"
            await stop_msg.edit_text(error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop: {e}")

    async def _cmd_start_server(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_server.
        """
        start_msg = await update.message.reply_text("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...")

        try:
            success = self.docker_manager.start_container()

            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                await asyncio.sleep(5)
                server_health, _ = self.server_monitor.check_server_health()

                result_text = (
                    "‚ñ∂Ô∏è **–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!**\n\n"
                    f"üîç –°—Ç–∞—Ç—É—Å: {server_health.value.upper()}\n"
                    f"üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {update.effective_user.first_name}"
                )
                logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            else:
                result_text = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞!**"
                logger.error(
                    f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}"
                )

            await start_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}"
            await start_msg.edit_text(error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start_server: {e}")

    async def _cmd_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs.
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        lines = 20  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if context.args and len(context.args) > 0:
            try:
                lines = min(int(context.args[0]), 100)  # –ú–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–æ–∫
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫")
                return

        logs_msg = await update.message.reply_text(
            f"üìã –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤..."
        )

        try:
            logs = self.docker_manager.get_container_logs(lines)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(logs) > 3800:
                logs = "...(–æ–±—Ä–µ–∑–∞–Ω–æ)...\n" + logs[-3800:]

            if logs.strip():
                logs_text = (
                    f"üìã **–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫):**\n\n"
                    f"```\n{logs}\n```"
                )
            else:
                logs_text = "üìã –õ–æ–≥–∏ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

            await logs_msg.edit_text(logs_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}"
            await logs_msg.edit_text(error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logs: {e}")

    async def _cmd_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info.
        """
        info_msg = await update.message.reply_text(
            "üìä –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
        )

        try:
            container_info = self.docker_manager.get_container_info()

            if "error" in container_info:
                await info_msg.edit_text(f"‚ùå {container_info['error']}")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_text = self._format_container_info(container_info)

            # –£–±–∏—Ä–∞–µ–º parse_mode –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
            await info_msg.edit_text(info_text)

        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
            await info_msg.edit_text(error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info: {e}")

    async def _cmd_players(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /players.
        """
        players_msg = await update.message.reply_text("üë• –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
            players_info = self.server_monitor.get_server_players()

            if not players_info.get("success"):
                await players_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:\n{players_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            players_text = self._format_players_list(players_info)

            await players_msg.edit_text(players_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: {str(e)}"
            await players_msg.edit_text(error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /players: {e}")

    async def _cmd_diagnose(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /diagnose - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
        """
        diag_msg = await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Docker...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            diagnosis = self.docker_manager.diagnose_container_detection()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result_text = "üìä **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:**\n\n"
            result_text += f"üéØ **–ò—Å–∫–æ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:** `{diagnosis['target_container_name']}`\n"
            result_text += f"üîå **Docker –ø–æ–¥–∫–ª—é—á–µ–Ω:** {'‚úÖ –î–∞' if diagnosis['docker_connected'] else '‚ùå –ù–µ—Ç'}\n"
            
            if diagnosis.get('error'):
                result_text += f"‚ùå **–û—à–∏–±–∫–∞:** {diagnosis['error']}\n\n"
            else:
                result_text += f"üîç **–ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:** {'‚úÖ –î–∞' if diagnosis['target_found'] else '‚ùå –ù–µ—Ç'}\n"
                
                if diagnosis['target_found']:
                    result_text += f"üìä **–°—Ç–∞—Ç—É—Å:** `{diagnosis['target_status']}`\n\n"
                
                # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                if diagnosis['all_containers']:
                    result_text += f"üìã **–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ({len(diagnosis['all_containers'])}):**\n"
                    for container in diagnosis['all_containers']:
                        status_emoji = "üü¢" if container['status'] == 'running' else "üî¥"
                        result_text += f"{status_emoji} `{container['name']}` - {container['status']}\n"
                    result_text += "\n"
                
                # –ü–æ—Ö–æ–∂–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                if diagnosis['similar_names']:
                    result_text += f"üîé **–ü–æ—Ö–æ–∂–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ({len(diagnosis['similar_names'])}):**\n"
                    for container in diagnosis['similar_names']:
                        status_emoji = "üü¢" if container['status'] == 'running' else "üî¥"
                        result_text += f"{status_emoji} `{container['name']}` - {container['status']}\n"
                else:
                    result_text += "üîé **–ü–æ—Ö–æ–∂–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

            await diag_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}"
            await diag_msg.edit_text(error_text)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /diagnose: {e}")

    def _format_status_report(
        self,
        container_status: ContainerStatus,
        server_health: ServerHealth,
        health_details: Dict[str, Any],
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_emoji = {
            ContainerStatus.RUNNING: "üü¢",
            ContainerStatus.STOPPED: "üî¥",
            ContainerStatus.STARTING: "üü°",
            ContainerStatus.STOPPING: "üü°",
            ContainerStatus.RESTARTING: "üü°",
            ContainerStatus.NOT_FOUND: "‚ùì",
            ContainerStatus.ERROR: "‚ùå",
        }

        emoji = container_emoji.get(container_status, "‚ùì")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report = f"{emoji} –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container_status.value.upper()}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
        health_report = self.server_monitor.format_health_report(
            server_health, health_details
        )
        report += health_report

        return report

    def _format_container_info(self, info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
        """
        text = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ {info['name']}\n\n"

        text += f"üîç –°—Ç–∞—Ç—É—Å: {info['status']}\n"
        text += f"üñºÔ∏è –û–±—Ä–∞–∑: {info['image']}\n"
        text += f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏: {info['restart_count']}\n\n"

        # –í—Ä–µ–º—è
        if info.get("started_at"):
            started = info["started_at"][:19].replace("T", " ")
            text += f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω: {started} UTC\n"

        # –†–µ—Å—É—Ä—Å—ã
        if info.get("cpu_usage") is not None:
            text += f"üñ•Ô∏è CPU: {info['cpu_usage']}%\n"

        if info.get("memory_usage"):
            mem = info["memory_usage"]
            text += (
                f"üíæ –ü–∞–º—è—Ç—å: {mem['usage']} / {mem['limit']} ({mem['percentage']})\n"
            )

        # –ü–æ—Ä—Ç—ã
        if info.get("ports"):
            text += "\nüîå –ü–æ—Ä—Ç  API:\n"
            for container_port, host_bindings in info["ports"].items():
                if host_bindings:
                    for binding in host_bindings:
                        text += (
                            f"  ‚Ä¢ {container_port} ‚Üí {binding['HostIp']}:"
                            f"{binding['HostPort']}\n"
                        )
                else:
                    text += f"  ‚Ä¢ {container_port} (–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω)\n"

        return text

    def _format_players_list(self, players_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        count = players_info.get("count", 0)
        max_players = players_info.get("max", 100)
        players = players_info.get("players", [])

        text = f"üë• **–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω: {count}/{max_players}**\n\n"

        if count == 0:
            text += "üò¥ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç"
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ ID
            players_sorted = sorted(players, key=lambda p: p.get("id", 0))

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
            max_display = 20
            displayed_players = players_sorted[:max_display]

            for i, player in enumerate(displayed_players, 1):
                player_id = player.get("id", "?")
                player_name = player.get("name", "Unknown")
                ping = player.get("ping", 0)

                # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–∏–Ω–≥–∞
                if ping < 50:
                    ping_emoji = "üü¢"
                elif ping < 100:
                    ping_emoji = "üü°"
                else:
                    ping_emoji = "üî¥"

                text += (
                    f"{i}. **{player_name}** (ID: {player_id}) {ping_emoji} {ping}ms\n"
                )

            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            if count > max_display:
                text += f"\n... –∏ –µ—â—ë {count - max_display} –∏–≥—Ä–æ–∫–æ–≤"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_time = time.strftime("%H:%M:%S")
        text += f"\n\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {check_time}"

        return text

    def _check_restart_limit(self, user_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        current_time = time.time()
        hour_ago = current_time - 3600  # 1 —á–∞—Å –Ω–∞–∑–∞–¥

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_restarts = self.restart_history.get(user_id, [])

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
        recent_restarts = [t for t in user_restarts if t > hour_ago]
        self.restart_history[user_id] = recent_restarts

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        return len(recent_restarts) < self.restart_limit

    def _add_restart_to_history(self, user_id: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if user_id not in self.restart_history:
            self.restart_history[user_id] = []

        self.restart_history[user_id].append(time.time())

    async def set_bot_commands(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ Telegram.
        """
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"),
            BotCommand("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
            BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
            BotCommand("start_server", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
            BotCommand("logs", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"),
            BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"),
            BotCommand("players", "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω"),
            BotCommand("diagnose", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"),
            BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        ]

        await self.application.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
        """
        logger.info("–ó–∞–ø—É—Å–∫ Rage Bot...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await self.set_bot_commands()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        asyncio.create_task(self._monitoring_background_task())
        
        await self.application.updater.start_polling(
            allowed_updates=Update.ALL_TYPES, drop_pending_updates=True
        )

        logger.info("Rage Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    async def _monitoring_background_task(self):
        """
        –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        logger.info("–ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
                health, details = self.server_monitor.check_server_health()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
                if details.get("status_changed", False):
                    await self._handle_status_change(health, details)
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (60 —Å–µ–∫—É–Ω–¥)
                await asyncio.sleep(60)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    async def _handle_status_change(self, new_status: ServerHealth, details: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        """
        previous_status = details.get("previous_status")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
        if (previous_status in ["starting", "unhealthy"] and 
            new_status == ServerHealth.HEALTHY):
            
            message = (
                "üéâ **–°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω!**\n\n"
                "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
                "üîó –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
            )
            
            await self._send_notification_to_groups(message)
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞
        elif new_status == ServerHealth.UNHEALTHY and previous_status in ["healthy", "degraded"]:
            message = (
                "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å**\n\n"
                "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
            )
            await self._send_notification_to_groups(message)
    
    async def _send_notification_to_groups(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∞–¥–º–∏–Ω–∞–º.
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—ã
            allowed_groups = config_manager.get_allowed_groups()
            for group_id in allowed_groups:
                try:
                    await self.application.bot.send_message(
                        chat_id=group_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
            admin_users = config_manager.get_admin_users()
            for admin_id in admin_users:
                try:
                    await self.application.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞.
        """
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Rage Bot...")

        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()

        logger.info("Rage Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
